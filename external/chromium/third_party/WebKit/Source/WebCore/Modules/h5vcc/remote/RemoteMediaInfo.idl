/*
 * Copyright (C) 2013 Google Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    Namespace=h5vcc::remote,
    Conditional=LB_SHELL_REMOTE_CONTROL,
    Constructor,
] interface RemoteMediaInfo {

    attribute unsigned short status;
    attribute DOMString appMediaId;
    attribute DOMString videoTitle;
    attribute DOMString videoSubtitle;
    attribute DOMString thumbnailUrl;
    attribute float playbackRate;
    attribute long playbackPosition;
    attribute long mediaStartTime;
    attribute long mediaEndTime;
    attribute long minSeekTime;
    attribute long maxSeekTime;

    static void setMediaInfo(RemoteMediaInfo mediaInfo);
    static void setCapabilitiesEnabled(unsigned short bitmask);
    [Custom] static void setSeekCallback(in [Callback] RemoteMediaScrollEventCallback callback);

    static void clearMediaInfo();

    // constants for RemoteMediaInfo status:
    const unsigned short PLAYBACK_CLOSED = 0;
    const unsigned short PLAYBACK_CHANGING = 1;
    const unsigned short PLAYBACK_STOPPED = 2;
    const unsigned short PLAYBACK_PLAYING = 3;
    const unsigned short PLAYBACK_PAUSED = 4;

    // constants for RemoteMediaInfo capabilities:
    const unsigned short ENABLED_NONE = 0;
    const unsigned short ENABLED_PLAY = 1;
    const unsigned short ENABLED_PAUSE = 2;
    const unsigned short ENABLED_PREVIOUS = 4;
    const unsigned short ENABLED_NEXT = 8;
    const unsigned short ENABLED_STOP = 16;
    const unsigned short ENABLED_FASTFORWARD = 32;
    const unsigned short ENABLED_REWIND = 64;
    const unsigned short ENABLED_CHANNELUP = 128;
    const unsigned short ENABLED_CHANNELDOWN = 256;
    const unsigned short ENABLED_BACK = 512;
    const unsigned short ENABLED_VIEW = 1024;
    const unsigned short ENABLED_MENU = 2048;
};
